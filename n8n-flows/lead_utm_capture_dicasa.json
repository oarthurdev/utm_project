{
  "name": "Lead UTM Capture to Kommo - DiCasa",
  "nodes": [
    {
      "parameters": {
        "path": "utm_capture_dicasa",
        "httpMethod": "GET,POST",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Webhook - DiCasa UTM Capture",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "dicasa-utm-capture"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"$request\"][\"method\"]}}",
              "value2": "GET"
            }
          ]
        }
      },
      "name": "Check Request Method",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "functionCode": "// Facebook Webhook Verification for Lead Ads\nconst queryParams = $json.$request.query;\nconst hubMode = queryParams['hub.mode'];\nconst hubChallenge = queryParams['hub.challenge'];\nconst hubVerifyToken = queryParams['hub.verify_token'];\n\nconst expectedVerifyToken = $env.FACEBOOK_WEBHOOK_VERIFY_TOKEN;\n\nconsole.log(`[FACEBOOK WEBHOOK VERIFICATION] DiCasa - Mode: ${hubMode}, Token: ${hubVerifyToken}`);\n\n// Verify the webhook according to Facebook documentation\nif (hubMode === 'subscribe' && hubVerifyToken === expectedVerifyToken) {\n  console.log(`[FACEBOOK WEBHOOK SUCCESS] DiCasa - Webhook verified successfully`);\n  return {\n    verified: true,\n    challenge: hubChallenge,\n    message: 'Facebook webhook verified successfully for DiCasa'\n  };\n} else {\n  console.error(`[FACEBOOK WEBHOOK ERROR] DiCasa - Verification failed. Expected token: ${expectedVerifyToken}, Received: ${hubVerifyToken}`);\n  return {\n    verified: false,\n    error: 'Webhook verification failed',\n    message: 'Invalid verify token or mode'\n  };\n}"
      },
      "name": "Facebook Webhook Verification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 180]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"verified\"]}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Check Verification Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 180]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{$json[\"challenge\"]}}"
      },
      "name": "Return Challenge Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 120]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"message\": \"{{$json.message}}\",\n  \"error\": \"{{$json.error}}\"\n}",
        "responseCode": 403
      },
      "name": "Verification Failed Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 240]
    },
    {
      "parameters": {
        "functionCode": "// Process Facebook Lead Ads webhook data for DiCasa\nconst requestData = $json;\n\n// Check if this is Facebook Lead Ads webhook data\nif (requestData.object === 'page' && requestData.entry) {\n  console.log(`[FACEBOOK LEAD ADS] DiCasa - Processing webhook data`);\n  \n  const entry = requestData.entry[0];\n  const changes = entry.changes || [];\n  \n  for (const change of changes) {\n    if (change.field === 'leadgen' && change.value) {\n      const leadData = change.value;\n      \n      // Extract lead information\n      const leadgenId = leadData.leadgen_id;\n      const formId = leadData.form_id;\n      const adId = leadData.ad_id;\n      const campaignId = leadData.campaign_id;\n      const adsetId = leadData.adset_id;\n      \n      // Process field data\n      const fieldData = {};\n      if (leadData.field_data) {\n        leadData.field_data.forEach(field => {\n          fieldData[field.name] = field.values[0] || '';\n        });\n      }\n      \n      // Extract UTM parameters from the lead data or use defaults\n      const utmData = {\n        utm_source: leadData.utm_source || 'facebook',\n        utm_medium: leadData.utm_medium || 'social',\n        utm_campaign: leadData.utm_campaign || `dicasa_campaign_${campaignId}`,\n        utm_content: leadData.utm_content || `ad_${adId}`,\n        utm_term: leadData.utm_term || ''\n      };\n      \n      return {\n        is_facebook_leadgen: true,\n        leadgen_id: leadgenId,\n        form_id: formId,\n        ad_id: adId,\n        campaign_id: campaignId,\n        adset_id: adsetId,\n        lead_data: fieldData,\n        utm_data: utmData,\n        processed_at: new Date().toISOString(),\n        source_system: 'dicasa'\n      };\n    }\n  }\n  \n  // No leadgen data found\n  return {\n    is_facebook_leadgen: false,\n    error: 'No leadgen data found in webhook',\n    raw_data: requestData\n  };\n} else {\n  // Direct UTM capture (legacy format)\n  const leadId = requestData.lead_id;\n  \n  if (!leadId) {\n    return {\n      is_facebook_leadgen: false,\n      error: 'Missing lead_id for direct UTM capture',\n      raw_data: requestData\n    };\n  }\n  \n  return {\n    is_facebook_leadgen: false,\n    lead_id: leadId,\n    utm_data: {\n      utm_source: requestData.utm_source || '',\n      utm_medium: requestData.utm_medium || '',\n      utm_campaign: requestData.utm_campaign || '',\n      utm_content: requestData.utm_content || '',\n      utm_term: requestData.utm_term || ''\n    },\n    processed_at: new Date().toISOString(),\n    source_system: 'dicasa'\n  };\n}"
      },
      "name": "Process Facebook Lead Ads Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 360]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"is_facebook_leadgen\"]}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Check Data Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 360]
    },
    {
      "parameters": {
        "functionCode": "// Process UTM data for DiCasa leads (both Facebook Lead Ads and direct UTM)\nconst inputData = $json;\nlet leadId, utmData, leadData = {};\n\nif (inputData.is_facebook_leadgen) {\n  // Facebook Lead Ads processing\n  leadId = inputData.leadgen_id;\n  utmData = inputData.utm_data;\n  leadData = inputData.lead_data;\n  \n  console.log(`[DICASA FACEBOOK LEADGEN] Processing lead: ${leadId}`);\n} else {\n  // Direct UTM capture processing\n  leadId = inputData.lead_id;\n  utmData = inputData.utm_data;\n  \n  console.log(`[DICASA DIRECT UTM] Processing lead: ${leadId}`);\n}\n\n// Clean and validate UTM parameters\nObject.keys(utmData).forEach(key => {\n  if (utmData[key]) {\n    // Trim whitespace and limit length\n    utmData[key] = utmData[key].toString().trim().substring(0, 255);\n    // URL decode if needed\n    try {\n      utmData[key] = decodeURIComponent(utmData[key]);\n    } catch (e) {\n      // Keep original if decode fails\n    }\n  }\n});\n\n// Add DiCasa prefix to campaign if not already present\nif (utmData.utm_campaign && !utmData.utm_campaign.includes('dicasa_')) {\n  utmData.utm_campaign = 'dicasa_' + utmData.utm_campaign;\n}\n\nreturn {\n  lead_id: leadId,\n  ...utmData,\n  lead_data: leadData,\n  is_facebook_leadgen: inputData.is_facebook_leadgen || false,\n  form_id: inputData.form_id,\n  ad_id: inputData.ad_id,\n  campaign_id: inputData.campaign_id,\n  processed_at: new Date().toISOString(),\n  source_system: 'dicasa'\n};"
      },
      "name": "Process UTM Data - DiCasa",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://{{$env.KOMMO_ACCOUNT_DOMAIN}}/api/v4/leads/{{$json[\"lead_id\"]}}",
        "method": "PATCH",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$env.KOMMO_API_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"custom_fields_values\": [\n    {\n      \"field_id\": \"{{$env.KOMMO_UTM_SOURCE_FIELD_ID}}\",\n      \"values\": [{\"value\": \"{{$json.utm_source}}\"}]\n    },\n    {\n      \"field_id\": \"{{$env.KOMMO_UTM_MEDIUM_FIELD_ID}}\",\n      \"values\": [{\"value\": \"{{$json.utm_medium}}\"}]\n    },\n    {\n      \"field_id\": \"{{$env.KOMMO_UTM_CAMPAIGN_FIELD_ID}}\",\n      \"values\": [{\"value\": \"{{$json.utm_campaign}}\"}]\n    },\n    {\n      \"field_id\": \"{{$env.KOMMO_UTM_CONTENT_FIELD_ID}}\",\n      \"values\": [{\"value\": \"{{$json.utm_content}}\"}]\n    },\n    {\n      \"field_id\": \"{{$env.KOMMO_UTM_TERM_FIELD_ID}}\",\n      \"values\": [{\"value\": \"{{$json.utm_term}}\"}]\n    }\n  ]\n}",
        "options": {
          "timeout": 30000
        }
      },
      "name": "Update Lead in Kommo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [900, 240]
    },
    {
      "parameters": {
        "functionCode": "// Log successful UTM capture for DiCasa\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  level: 'SUCCESS',\n  system: 'dicasa',\n  lead_id: $json.lead_id,\n  utm_data: {\n    source: $json.utm_source,\n    medium: $json.utm_medium,\n    campaign: $json.utm_campaign,\n    content: $json.utm_content,\n    term: $json.utm_term\n  },\n  kommo_response: $json,\n  message: 'UTM parameters successfully captured and stored in Kommo'\n};\n\nconsole.log(`[DICASA UTM SUCCESS] Lead ${$json.lead_id} - UTM data captured: ${JSON.stringify(logEntry.utm_data)}`);\n\nreturn logEntry;"
      },
      "name": "Log Success", 
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 240]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"UTM parameters captured successfully for DiCasa lead\",\n  \"lead_id\": \"{{$json.lead_id}}\",\n  \"processed_at\": \"{{$json.processed_at}}\",\n  \"utm_data\": {\n    \"source\": \"{{$json.utm_source}}\",\n    \"medium\": \"{{$json.utm_medium}}\",\n    \"campaign\": \"{{$json.utm_campaign}}\",\n    \"content\": \"{{$json.utm_content}}\",\n    \"term\": \"{{$json.utm_term}}\"\n  }\n}"
      },
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 240]
    },
    {
      "parameters": {
        "functionCode": "// Log error for failed UTM capture\nconst error = $json.error || 'Unknown error occurred';\nconst leadId = $input.all()[0].json.lead_id || 'unknown';\n\nconst errorLog = {\n  timestamp: new Date().toISOString(),\n  level: 'ERROR',\n  system: 'dicasa',\n  lead_id: leadId,\n  error_type: 'utm_capture_failed',\n  error_message: error.toString(),\n  input_data: $input.all()[0].json,\n  message: 'Failed to capture UTM parameters for DiCasa lead'\n};\n\nconsole.error(`[DICASA UTM ERROR] Lead ${leadId} - Error: ${error}`);\n\nreturn errorLog;"
      },
      "name": "Log Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 420]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"message\": \"Failed to capture UTM parameters for DiCasa lead\",\n  \"error\": \"{{$json.error_message}}\",\n  \"lead_id\": \"{{$json.lead_id}}\"\n}",
        "responseCode": 500
      },
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 420]
    },
    {
      "parameters": {
        "functionCode": "// Validate missing lead_id error\nconst errorLog = {\n  timestamp: new Date().toISOString(),\n  level: 'ERROR',\n  system: 'dicasa',\n  error_type: 'validation_failed',\n  error_message: 'Lead ID is required but not provided',\n  input_data: $json,\n  message: 'UTM capture validation failed - missing lead_id'\n};\n\nconsole.error(`[DICASA UTM VALIDATION ERROR] Missing lead_id in request`);\n\nreturn errorLog;"
      },
      "name": "Log Validation Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 360]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Validation failed: lead_id is required\",\n  \"error\": \"Missing required parameter: lead_id\"\n}",
        "responseCode": 400
      },
      "name": "Validation Error Response", 
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 360]
    }
  ],
  "connections": {
    "Webhook - DiCasa UTM Capture": {
      "main": [
        [
          {
            "node": "Check Request Method",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Request Method": {
      "main": [
        [
          {
            "node": "Facebook Webhook Verification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Facebook Lead Ads Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook Webhook Verification": {
      "main": [
        [
          {
            "node": "Check Verification Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Verification Success": {
      "main": [
        [
          {
            "node": "Return Challenge Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Verification Failed Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Facebook Lead Ads Data": {
      "main": [
        [
          {
            "node": "Check Data Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Data Type": {
      "main": [
        [
          {
            "node": "Process UTM Data - DiCasa",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process UTM Data - DiCasa": {
      "main": [
        [
          {
            "node": "Update Lead in Kommo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead in Kommo": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Validation Error": {
      "main": [
        [
          {
            "node": "Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "utm-capture",
      "name": "UTM Capture"
    },
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z", 
      "id": "dicasa",
      "name": "DiCasa"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
